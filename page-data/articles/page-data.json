{"componentChunkName":"component---src-pages-articles-js","path":"/articles/","result":{"data":{"site":{"siteMetadata":{"title":"周大丢的blog"}},"allMdx":{"edges":[{"node":{"excerpt":"最近面了阿里和蚂蚁，感觉自己离大厂的要求还有点距离，针对面试中回答的不好的知识点进行复盘，加油💪🏻！ 09.21 蚂蚁-国际化二面 1. get和post的区别 a.语义上（specification）的区别： 根据技术规格文档，get和post…","fields":{"slug":"/0013_面试复盘/"},"frontmatter":{"date":"2022-09-20","title":"面试复盘系列（一）","description":"最近面了阿里和蚂蚁，针对面试中的一些知识点进行复盘","tags":["面试"]}}},{"node":{"excerpt":"前言 React支持两种形式的组件，分别是class组件和function组件。 class组件是通过继承模板类(Component, PureComponent…","fields":{"slug":"/0011_React_hooks/"},"frontmatter":{"date":"2022-08-03","title":"常见的React Hooks解析","description":"探究常见的React Hook的用法和原理","tags":["react"]}}},{"node":{"excerpt":"浏览器的同源策略(Same origin policy)是由Netscape公司1995引入的，主要是为了防止XSS（跨站脚本），CSFR（跨站请求伪造）等攻击。但是有时候需要跨域，所以本文会介绍几种常见的方法去规避浏览器的同源策略。 概念 假设，你在浏览器上打开A,B…","fields":{"slug":"/0006_同源策略和跨域/"},"frontmatter":{"date":"2022-07-18","title":"同源策略和跨域","description":"浏览器的同源策略，常见几种跨域实现方式","tags":["网络"]}}},{"node":{"excerpt":"最近在做一个UI组件库项目，记录一下配置webpack的过程，技术栈为webpack + react + typescript 前言 我们先对比一下gulp, webpack和vite…","fields":{"slug":"/0004_webpack工程化配置/"},"frontmatter":{"date":"2022-07-15","title":"webpack工程化配置","description":"webpack工程化，config","tags":["webpack"]}}},{"node":{"excerpt":"今天我们一起探究一下useState的实现原理 前言 在React函数组件hooks中，我们用的最多的应该就是useState了，但是我们真的了解它的原理吗？先让我们一起来看一个例子:  很简单，这就是页面上有一个button组件，点击+1，count显示的数字就加…","fields":{"slug":"/0005_useState原理解析/"},"frontmatter":{"date":"2022-07-13","title":"useState原理解析","description":"React useState原理，手写useState","tags":["react"]}}},{"node":{"excerpt":"今天继续总结React的知识点，我们来总结一下React组件间通信方式有哪些？ 前言 React组件间通信一般可以分为以下几种：   父组件 -> 子组件 props 子组件 -> 父组件 callback functions 兄弟组件之间通信 Parent component…","fields":{"slug":"/0012_react组件通信/"},"frontmatter":{"date":"2022-07-06","title":"React组件间通信","description":"React组件间通信总结","tags":["react"]}}},{"node":{"excerpt":"之前有了解过class组件的生命周期，但是一直没有深入，今天我们一起给盘明白吧 什么生命周期 生命周期（lifecycle）指的就是组件实例从被创建到被销毁的过程。需要注意的是只有class组件才有生命周期，因为class…","fields":{"slug":"/0010_React类组件的生命周期/"},"frontmatter":{"date":"2022-07-04","title":"React class组件的生命周期","description":"了解class组件的各个生命周期，以及如何用hooks模拟","tags":["react"]}}},{"node":{"excerpt":"面试中，经常会让你手写防抖和节流，如果你还不知道，赶紧学起来吧 什么是防抖和节流 关于防抖（debounce）和节流（throttle）有个经典的比喻：\n有一个电梯，不考虑容量限制，有两种运行模式debounce和throttle，超时timer设置为15s…","fields":{"slug":"/0002_手写防抖节流/"},"frontmatter":{"date":"2022-06-23","title":"手写防抖节流","description":"介绍防抖节流，手写并测试","tags":["javascript"]}}},{"node":{"excerpt":"回顾一下常用的垂直居中的几种方式 1. flex方法 给父元素设置display：flex,再设置垂直水平居中就可以了 代码如下： 2.绝对定位和相对定位 父元素设置position: relative; 子元素设置position: absolute; left/bottom…","fields":{"slug":"/0009_CSS垂直居中方法汇总/"},"frontmatter":{"date":"2022-06-09","title":"CSS垂直居中的方法汇总","description":"CSS常见实现垂直居中的方法","tags":["CSS"]}}},{"node":{"excerpt":"CSS两栏布局和三栏布局实现方法一般是面试中的高频题，今天我们一起来总结一下吧！ 两栏布局 两栏布局一般是指页面中一共两栏，一般是左边固定宽度，右边自适应；或者右边固定宽度，左边自适应。除了特殊说明外，其余demo都是默认左边栏固定宽度，右边栏自适应。  1. float…","fields":{"slug":"/0008_CSS两栏和三栏布局/"},"frontmatter":{"date":"2022-06-08","title":"CSS两栏布局和三栏布局","description":"总结一下CSS两栏布局和三栏布局","tags":["CSS"]}}},{"node":{"excerpt":"最近在复习CSS知识点，总结一下CSS清除浮动的方式有哪些 文档流 在探究浮动之前，我们先了解一下什么是文档流： 文档流就是内联要元素从左到右依次排列，块元素从上到下依次排列，每个块元素都另起一行。内联元素的的宽和高都默认被内容撑开，块元素的宽度默认值是auto…","fields":{"slug":"/0007_CSS清除浮动/"},"frontmatter":{"date":"2022-06-07","title":"CSS清除浮动","description":"总结一下CSS清除浮动的方式","tags":["CSS"]}}},{"node":{"excerpt":"在面试中会经常被问：如何实现一个Event，如果你还不知道什么是发布订阅模式，一起学起来~ 发布订阅模式 Pub-sub pattern 发布订阅是一种主流框架都采用的一种设计模式，而EventHub是基于这种设计模式实现的一种实例.\n \n举个例子，有A,B,C…","fields":{"slug":"/0001_EventHub发布订阅模式/"},"frontmatter":{"date":"2022-06-04","title":"EventHub发布订阅模式","description":"介绍发布订阅模式，手写eventhub并测试","tags":["javascript"]}}},{"node":{"excerpt":"最近看到一个挺有意思的CSS问题，问怎么用CSS实现一个三角形，让我们一起看一下吧   借助一个正方形 我们考虑到div的边框都是直线，所以直接画行不通，可以借助一个正方形实现，画一个正方形，width和height设置为0， 然后设置border-top/border…","fields":{"slug":"/0003_CSS画三角形/"},"frontmatter":{"date":"2022-06-02","title":"CSS画一个三角形和扇形","description":"纯CSS实现一个三角形，扇形","tags":["CSS"]}}}]}},"pageContext":{}},"staticQueryHashes":["440568431","63159454","946521183"]}
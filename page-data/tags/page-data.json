{"componentChunkName":"component---src-pages-tags-js","path":"/tags/","result":{"data":{"allMdx":{"edges":[{"node":{"excerpt":"背景 由于资源有限（只有一台服务器），又希望在服务器上部署多个静态站点，多个静态站点之间通过不同的 path 进行区分。如访问我的博客，希望通过  host/blog/xxx  来访问。于是有了今天的探索。 解决方案 经过一番搜索，找到了解决方案，原来 Gatsby…","fields":{"slug":"/0045_gatsby添加pathPrefix/"},"frontmatter":{"date":"2021-06-17","title":"Gatsby 添加 pathPrefix","description":"为了能在服务器上部署多个静态站点，给 Gatsby 添加 pathPrefix。","tags":["工程化"]}}},{"node":{"excerpt":"滑动窗口算法的大致逻辑 这个算法技巧的时间复杂度是O(N)，比字符串暴力算法要高效得多。 滑动窗口算法的代码框架 最小覆盖子串 leetcode:  最小覆盖子串 滑动窗口算法的思路是这样： 我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right =…","fields":{"slug":"/0044_算法思维之滑动窗口技巧/"},"frontmatter":{"date":"2020-06-15","title":"算法思维之滑动窗口技巧","description":"滑动窗口技巧介绍。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"双指针技巧分为两类，一类是「快慢指针」，一类是「左右指针」。 前者解决主要解决链表中的问题，比如典型的判定链表中是否包含环； 后者主要解决数组（或者字符串）中的问题，比如二分查找。 快慢指针的常见算法 快慢指针一般都初始化指向链表的头结点head，前进时快指针fast…","fields":{"slug":"/0043_算法思维之双指针技巧/"},"frontmatter":{"date":"2020-06-14","title":"算法思维之双指针技巧","description":"剖析双指针技巧，包括快慢指针与左右指针。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"二分查找框架 分析二分查找的一个技巧是：不要出现else，而是把所有情况用else if写清楚，这样可以清楚地展现所有细节。 理解后可自行简化。 其中 ... 标记的部分，就是可能出现细节问题的地方，当看到一个二分查找的代码时，首先注意这几个地方。 另外，计算mid…","fields":{"slug":"/0042_算法思维之二分查找/"},"frontmatter":{"date":"2020-06-13","title":"算法思维之二分查找","description":"深入理解二分查找思想。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"…","fields":{"slug":"/0041_算法思维之递归/"},"frontmatter":{"date":"2020-06-12","title":"算法思维之递归","description":"深入理解递归思想。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"回溯算法解题套路框架 回溯算法就是个多叉树的遍历问题 ，关键就是在前序遍历和后序遍历的位置做一些操作。 写backtrack…","fields":{"slug":"/0040_算法思维之回溯算法/"},"frontmatter":{"date":"2020-06-11","title":"算法思维之回溯算法","description":"介绍常见的算法思维。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"特殊数据结构--单调栈 单调栈实际上就是栈，只是利用了一些巧妙的逻辑，使得每次新元素入栈后，栈内的元素都保持有序（单调递增或单调递减）。 单调栈用途不太广泛，只处理一种典型的问题，叫做Next Greater Element。这里是 单调递增栈 。 例子…","fields":{"slug":"/0039_数据结构的应用/"},"frontmatter":{"date":"2020-06-09","title":"数据结构的应用","description":"实用的数据结构介绍。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"原本代码：报错。 debounce： 修改后的代码 参考文章 React SyntheticEvent reuse SyntheticEvent Debouncing events with React Fixing React Warning: Synthetic Events…","fields":{"slug":"/0038_在React事件中debounce遇到的问题/"},"frontmatter":{"date":"2020-05-05","title":"在React事件中使用debounce遇到的问题","description":"记录在React input change事件中，使用debounce遇到的问题。","tags":["react"]}}},{"node":{"excerpt":"项目配置 Babel配置 如何在代码中使用async/await 参考文章： Babel 7 - ReferenceError: regeneratorRuntime is not defined regeneratorRuntime is not defined…","fields":{"slug":"/0037_从头开始搭建React-TypeScript项目/"},"frontmatter":{"date":"2020-04-22","title":"从头开始搭建React+TypeScript+Eslint+Babel+Webpack项目","description":"记录搭建React、TypeScript、Babel、Eslint、Webpack项目过程中遇到的问题。","tags":["工程化"]}}},{"node":{"excerpt":"什么是JSON Web Token？ JSON Web Token（缩写JWT）是一个标准，用来创建访问服务的token，以作为客户端的身份标识。 JSON Web Token的工作原理 客户端发起登录请求，将用户名密码发给 认证服务器 ； 认证服务器 创建一个token…","fields":{"slug":"/0036_JSON-Web-Token介绍/"},"frontmatter":{"date":"2020-04-19","title":"JSON Web Token介绍","description":"介绍JWT是什么，怎么用，为什么要用等。","tags":["Node.js"]}}},{"node":{"excerpt":"格式化代码 如何将代码缩进从tab转换为2个space？ 进入编辑器设置页，选择Edit in settings.json，添加如下配置。 安装VSCode格式化代码插件Beautify。 打开要格式化的代码文件，cmd + shift + p，输入beautify file…","fields":{"slug":"/0035_VSCode小技巧/"},"frontmatter":{"date":"2020-04-13","title":"VSCode小技巧","description":"提升开发效率的VSCode小技巧。","tags":["编辑器"]}}},{"node":{"excerpt":"想象这样一个场景：在JavaScript中发起一个异步请求，耗时很久都没有返回，这时候你想中断这个请求，怎么做呢？ 幸运的是，JavaScript提供了一种方便的方式来中断一个异步任务。在这篇文章里，会告诉你如何使用它来创建你自己的可中断方法。 Abort Signal…","fields":{"slug":"/0034_如何中断一个异步请求/"},"frontmatter":{"date":"2020-04-12","title":"Aborting a signal：如何中断一个异步请求？","description":"在JS中发出一个异步请求后，如何中断它？","tags":["javascript"]}}},{"node":{"excerpt":"你到现在还只知道ES2015(ES6)？ES2020都出来啦！马上撸起来~ 动态import() 实际上，动态import()很早就提出来了，并且有实验的版本，但是需要通过babel来编译成浏览器支持的语法。现在，浏览器已经原生支持动态import()啦！ 静态import…","fields":{"slug":"/0033_ES2020新增特性必知必会/"},"frontmatter":{"date":"2020-04-10","title":"ES2020新增特性必知必会","description":"介绍ES2020新增的特性，比如动态import()等。","tags":["javascript"]}}},{"node":{"excerpt":"起步晚但非常火的自媒体的一些共同点： 1 专注、冲劲十足 真正的高手，起步就是坚持100天，对自己的想法有要求有计划，每天严格按照自己的计划写到足够的量。 所有的质都是建立在量上 。没有足够多的量作为支撑，是很难成为高手的。…","fields":{"slug":"/0009_20200408-起步晚却特别火的高手的5个秘密/"},"frontmatter":{"date":"2020-04-08","title":"20200408-起步晚却特别火的高手的5个秘密","description":null,"tags":null}}},{"node":{"excerpt":"…","fields":{"slug":"/0032_算法的那些事/"},"frontmatter":{"date":"2020-04-07","title":"算法的那些事","description":"从宏观角度剖析算法。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"…","fields":{"slug":"/0031_写作的那些事/"},"frontmatter":{"date":"2020-04-05","title":"写作的那些事","description":"从零开始学写作。","tags":["阅读写作"]}}},{"node":{"excerpt":"Node.js内置模块 Node.js调用操作系统； 操作系统通知Node.js。 EventEmitter 观察者模式： 关键在于 “不知道被通知者存在” ； 以及 “没有人听还能继续下去” 。 异步操作 异步：非阻塞I/O I/O即Input/Output…","fields":{"slug":"/0030_Nodejs概览/"},"frontmatter":{"date":"2020-03-25","title":"Node.js概览","description":"Nodejs基础，包括事件循环、非阻塞I/O等特性，性能调优，框架与工程化等。","tags":["Node.js"]}}},{"node":{"excerpt":"安全沙箱：页面和系统之间的隔离墙 安全视角下的多进程架构 疑问： 为什么一定要通过浏览器内核去请求资源，再将数据转发给渲染进程，而不直接从进程内部去请求网络资源？ 为什么渲染进程只负责生成页面图片，生成图片还要经过IPC…","fields":{"slug":"/0029_浏览器安全--安全沙箱-HTTPS/"},"frontmatter":{"date":"2020-03-24","title":"浏览器安全--安全沙箱-HTTPS","description":"安全沙箱：页面和系统之间的隔离墙。HTTPS：让数据传输更安全。","tags":["浏览器"]}}},{"node":{"excerpt":"浏览器安全可以分为三大块—— Web页面安全、浏览器网络安全和浏览器系统安全 。 同源策略：为什么XMLHttpRequest不能跨域请求资源？ 什么是同源策略 如果两个URL的 协议、域名和端口 都相同，我们就称这两个URL…","fields":{"slug":"/0028_浏览器安全--同源策略-XSS-CSRF/"},"frontmatter":{"date":"2020-03-23","title":"浏览器安全--同源策略-XSS-CSRF","description":"同源策略：为什么XMLHttpRequest不能跨域请求资源？跨站脚本攻击(XSS)：为什么Cookie中有HttpOnly属性？CSRF攻击：陌生链接不要随便点。","tags":["浏览器"]}}},{"node":{"excerpt":"HTTP/1：HTTP性能优化 缝缝补补的HTTP/1.1 1 改进持久连接 HTTP/1.1中增加了持久连接的方法，它的特点是在一个TCP连接上可以传输多个HTTP请求，只要浏览器或者服务器没有明确断开连接，那么该TCP连接会一直保持 。 持久连接在HTTP/1.…","fields":{"slug":"/0027_浏览器中的网络--HTTP1-HTTP2-HTTP3/"},"frontmatter":{"date":"2020-03-22","title":"浏览器中的网络--HTTP/1-HTTP/2-HTTP/3","description":"HTTP/1：HTTP性能优化。HTTP/2：如何提升网络速度？HTTP/3：甩掉TCP、TLS的包袱，构建高效网络。","tags":["浏览器"]}}},{"node":{"excerpt":"分层和合成机制：为什么CSS动画比JavaScript高效？ 显示器是怎么显示图像的 每个显示器都有固定的刷新频率，通常是60HZ，也就是每秒更新60张图片，更新的图片都来自于显卡中一个叫 前缓冲区 的地方。 显示器：每秒固定 读取 6…","fields":{"slug":"/0026_浏览器中的页面--分层和合成机制-页面性能-虚拟DOM-PWA-WebComponent/"},"frontmatter":{"date":"2020-03-21","title":"浏览器中的页面--分层和合成机制-页面性能-虚拟DOM-PWA-WebComponent","description":"分层和合成机制：为什么CSS动画比JavaScript高效？页面性能：如何系统地优化页面？虚拟DOM：虚拟DOM和实际的DOM有何不同？渐进式网页应用(PWA)：它究竟解决了Web应用的哪些问题？WebComponent：像搭积木一样构建Web应用。","tags":["浏览器"]}}},{"node":{"excerpt":"Chrome开发者工具：利用网络面板做性能分析 网络面板由控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要这6个区域构成。\n DOMContentLoaded ，这个事件发生后，说明 页面已经构建好DOM 了，这意味着构建DOM所需要的HTML文件、JavaScript…","fields":{"slug":"/0025_浏览器中的页面--Chrome开发者工具-DOM树-渲染流水线/"},"frontmatter":{"date":"2020-03-20","title":"浏览器中的页面--Chrome开发者工具-DOM树-渲染流水线","description":"Chrome开发者工具：利用网络面板做性能分析。DOM树：JavaScript是如何影响DOM树构建的？渲染流水线：CSS如何影响首次加载时的白屏时间？","tags":["浏览器"]}}},{"node":{"excerpt":"Promise：使用Promise，告别回调函数 Promise解决的是异步编码风格的问题。 异步编程的问题：代码逻辑不连续 Web…","fields":{"slug":"/0024_浏览器中的页面循环系统--Promise-async-await/"},"frontmatter":{"date":"2020-03-19","title":"浏览器中的页面循环系统--Promise-async/await","description":"Promise：使用Promise，告别回调函数。async/await：使用同步的方式去写异步代码。","tags":["浏览器"]}}},{"node":{"excerpt":"WebAPI：XMLHttpRequest是怎么实现的？ 回调函数VS…","fields":{"slug":"/0023_浏览器中的页面循环系统--XMLHttpRequest-宏任务和微任务/"},"frontmatter":{"date":"2020-03-18","title":"浏览器中的页面循环系统--XMLHttpRequest-宏任务和微任务","description":"WebAPI：XMLHttpRequest是怎么实现的？宏任务和微任务：不是所有任务都是一个待遇","tags":["浏览器"]}}},{"node":{"excerpt":"消息队列和事件循环：页面是怎么“活”起来的？ 每个渲染进程都有一个主线程，并且主线程非常繁忙，既要处理DOM，又要计算样式，还要处理布局，同时还需要处理JavaScript…","fields":{"slug":"/0022_浏览器中的页面循环系统--消息队列和事件循环-setTimeout/"},"frontmatter":{"date":"2020-03-17","title":"浏览器中的页面循环系统--消息队列和事件循环-setTimeout","description":"消息队列和事件循环：页面是怎么“活”起来的？WebAPI：setTimeout是如何实现的？","tags":["浏览器"]}}},{"node":{"excerpt":"了解V8执行机制，能帮助你从底层了解JavaScript，也能帮助你深入理解语言转换器Babel、语法检查工具ESLint、前端框架Vue和React的一些底层实现机制。因此，了解V…","fields":{"slug":"/0021_V8工作原理--编译器和解释器/"},"frontmatter":{"date":"2020-03-16","title":"V8工作原理--编译器和解释器","description":"编译器和解释器：V8是如何执行一段JavaScript代码的？","tags":["浏览器"]}}},{"node":{"excerpt":"栈空间和堆空间：数据是如何存储的？ JavaScript是什么类型的语言 在 使用之前 就需要确认其变量数据类型的称为 静态语言 。在 运行过程中 需要检查数据类型的语言称为 动态语言 。JavaScript…","fields":{"slug":"/0020_V8工作原理--栈空间和堆空间-垃圾回收/"},"frontmatter":{"date":"2020-03-15","title":"V8工作原理--栈空间和堆空间-垃圾回收","description":"栈空间和堆空间：数据是如何存储的？垃圾回收：垃圾数据是如何自动回收的？","tags":["浏览器"]}}},{"node":{"excerpt":"疑问： 代码中出现相同的变量，JavaScript引擎是如何选择的？ 作用域链和闭包：代码中出现相同的变量，JavaScript…","fields":{"slug":"/0019_浏览器中的JavaScript执行机制--作用域链闭包和this/"},"frontmatter":{"date":"2020-03-14","title":"浏览器中的JavaScript执行机制--作用域链闭包和this","description":"作用域链和闭包 ：代码中出现相同的变量，JavaScript引擎是如何选择的？this：从JavaScript执行上下文的视角讲清楚this","tags":["浏览器"]}}},{"node":{"excerpt":"疑问： JavaScript代码是按顺序执行的吗？为什么JavaScript代码会出现栈溢出？var缺陷以及为什么要引入let和const？ 变量提升：JavaScript代码是按顺序执行的吗？ JavaScript…","fields":{"slug":"/0018_浏览器中的JavaScript执行机制--变量提升调用栈以及块级作用域/"},"frontmatter":{"date":"2020-03-13","title":"浏览器中的JavaScript执行机制--变量提升调用栈以及块级作用域","description":"变量提升：JavaScript代码是按顺序执行的吗？调用栈：为什么JavaScript代码会出现栈溢出？块级作用域：var缺陷以及为什么要引入let和const？","tags":["浏览器"]}}},{"node":{"excerpt":"OSI模型与TCP/IP模型 OSI概念模型：\n OSI概念模型与TCP/IP模型对照：\n 评估Web架构的七大关键属性 HTTP协议应当在七大属性中取得可接受的平衡： 性能Performance ：影响高可用的关键因素。 可伸缩性Scalability…","fields":{"slug":"/0016_HTTP协议/"},"frontmatter":{"date":"2020-03-12","title":"HTTP协议","description":"HTTP协议原理与实战。","tags":["网络"]}}},{"node":{"excerpt":"疑问： 从输入URL到页面展示，这中间发生了什么？HTML、CSS和JavaScript，是如何变成页面的？ 导航流程：从输入URL到页面展示，这中间发生了什么？ 从输入URL…","fields":{"slug":"/0017_宏观视角下的浏览器--导航流程与渲染流程/"},"frontmatter":{"date":"2020-03-12","title":"宏观视角下的浏览器--导航流程与渲染流程","description":"导航流程：从输入URL到页面展示，这中间发生了什么？渲染流程：HTML、CSS和JavaScript，是如何变成页面的？","tags":["浏览器"]}}},{"node":{"excerpt":"带着这些疑问，开始今天的学习： TCP协议：如何保证页面文件能被完整送达浏览器？ HTTP请求流程：为什么很多站点第二次打开速度会很快？ 你怎么理解HTTP和TCP的关系？ 优化Web…","fields":{"slug":"/0015_宏观视角下的浏览器--TCP协议与HTTP请求流程/"},"frontmatter":{"date":"2020-03-11","title":"宏观视角下的浏览器--TCP协议与HTTP请求流程","description":"TCP协议：如何保证页面文件能被完整送达浏览器？HTTP请求流程：为什么很多站点第二次打开速度会很快？","tags":["浏览器"]}}},{"node":{"excerpt":"Chrome架构：仅仅打开了1个页面，为什么有4个进程？ 今天我们就带着这个疑问，开始Chrome架构的学习吧。 浏览器概述 浏览器背后是标准，标准背后是共识。 Education is what remains after one has forgotten…","fields":{"slug":"/0014_宏观视角下的浏览器--Chrome架构/"},"frontmatter":{"date":"2020-03-10","title":"宏观视角下的浏览器--Chrome架构","description":"Chrome浏览器架构的变化。","tags":["浏览器"]}}},{"node":{"excerpt":"文章阅读 Finding Time to Become a Better Developer Finding Time to Become a Better Developer You don’t need to learn every new thing in order to…","fields":{"slug":"/0008_20200310-花时间成为更好的developer/"},"frontmatter":{"date":"2020-03-10","title":"20200310-花时间成为更好的develper","description":null,"tags":null}}},{"node":{"excerpt":"…","fields":{"slug":"/0007_20200309-写代码如何保持动力and好习惯/"},"frontmatter":{"date":"2020-03-09","title":"20200309-写代码如何保持动力and好习惯","description":null,"tags":null}}},{"node":{"excerpt":"网络分层的真实含义是什么？ 网络为什么要分层？因为，是个复杂的程序都要分层。 只要是在网络上跑的包，都是完整的。可以有下层没上层，绝对不可能有上层没下层。 ifconfig：最熟悉又陌生的命令行 IP…","fields":{"slug":"/0013_通信协议综述/"},"frontmatter":{"date":"2020-03-08","title":"通信协议综述","description":"网络协议相关。","tags":["网络"]}}},{"node":{"excerpt":"插件基本结构介绍 插件的运行环境 插件没有像loader那样的独立运行环境 插件只能在webpack里运行 插件的基本结构 搭建插件的运行环境 安装webpack、webpack-cli 创建webpack.config.js文件 在config…","fields":{"slug":"/0012_webpack-plugin/"},"frontmatter":{"date":"2020-03-06","title":"webpack plugin","description":"Webpack plugin的基础结构等等。","tags":["webpack"]}}},{"node":{"excerpt":"Review 拖延症犯啦~😳 文章阅读 My Favorite Chrome Dev Tools Tips and Tricks My Favorite Chrome Dev Tools Tips and Tricks jQuery style DOM queries in…","fields":{"slug":"/0006_20200306-ChromeDevTool/"},"frontmatter":{"date":"2020-03-06","title":"20200306-ChromeDevTool","description":"Chrome Dev Tools Tips and Tricks等","tags":null}}},{"node":{"excerpt":"Review…","fields":{"slug":"/0005_20200305-如何自学/"},"frontmatter":{"date":"2020-03-05","title":"20200305-如何自学","description":null,"tags":null}}},{"node":{"excerpt":"Review 跟踪了两天自己的时间使用情况，发现存在一些问题，每天都会做很多事情，但是往往重要的事情可能来不及做或没做完。 后面需要改进一下， 每天优先做最重要的三件事情 。 文章阅读 How I Manage to Work a 5-Hour Workday How I…","fields":{"slug":"/0004_20200304-高效工作/"},"frontmatter":{"date":"2020-03-04","title":"20200304-高效工作","description":null,"tags":null}}},{"node":{"excerpt":"loader的链式调用与执行顺序 一个最简单的loader代码结构 定义： loader只是一个导出为函数的JavaScript模块 。 多Loader时的执行顺序 多个loader串行执行； 顺序从右到左（从后往前）。 函数组合的两种情况 Unix中的Pipeline…","fields":{"slug":"/0011_webpack-loader/"},"frontmatter":{"date":"2020-03-03","title":"webpack loader","description":"Webpack loader的链式调用，loader的开发与调试等等。","tags":["webpack"]}}},{"node":{"excerpt":"Review 遇到困难，学会转变思维，自我娱乐，问题渐渐会迎刃而解。 文章阅读 How to Think More Productively: A Cheat Sheet Learn the fundamentals of a good developer mindset in…","fields":{"slug":"/0003_20200303-思维转变/"},"frontmatter":{"date":"2020-03-03","title":"20200303-思维转变","description":"思维转变；成为一个好的开发者的基本要求。","tags":null}}},{"node":{"excerpt":"杂七杂八 痛苦 + 反思 = 进步 在执行计划过程中，渐渐感到不舒服、不爽，但不能放弃，只有迈过这个坎，相信很快就会迎来曙光。\n要想进步，要想蜕变，这是必经过程，希望自己能一天比一天好，成为更好的自己，速度不需要很快，慢慢地、慢慢地，就好。 感恩Part…","fields":{"slug":"/0002_20200302-Review-JS2020等/"},"frontmatter":{"date":"2020-03-02","title":"20200302-Review","description":"JavaScript 2020+等","tags":null}}},{"node":{"excerpt":"…","fields":{"slug":"/0001_20200224-凡事可有方法论/"},"frontmatter":{"date":"2020-02-24","title":"20200224-凡事可有方法论","description":null,"tags":null}}},{"node":{"excerpt":"如何事半功倍地学习算法与数据结构 《Outlier》（异类——不一样的成功启示录）里面提到， 精通一个领域 ： Chunk it up（切碎知识点） 如下图 Deliberate practicing…","fields":{"slug":"/0010_算法数据结构介绍/"},"frontmatter":{"date":"2020-02-22","title":"算法数据结构介绍","description":"介绍如何学习算法与数据结构等。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"学习英语的方法 Summarizing. 随便看一篇文章，然后用自己的话语总结。 meetup.com. 找人说，1次/month。 host an exchange student 一段时间。 Get involved in your community…","fields":{"slug":"/如何学英语/"},"frontmatter":{"date":"2020-02-18","title":"如何学英语","description":"介绍学习英语的方法。","tags":["英语"]}}},{"node":{"excerpt":"准备阶段 webpack的编译安装下面的钩子调用顺序执行： entry-option: 初始化option run: 开始编译 make: 从entry开始递归地分析依赖，对每个依赖模块进行build before-resolve: 对模块位置进行解析 build-module…","fields":{"slug":"/0009_webpack流程篇/"},"frontmatter":{"date":"2020-02-10","title":"webpack流程篇","description":"Webpack流程篇，包括准备阶段、模块构建和chunk生成阶段和文件生成阶段等。","tags":["webpack"]}}},{"node":{"excerpt":"webpack启动过程分析 查找webpack入口文件 在命令行运行命令后，npm会让命令行工具进入 node_modules/.bin 目录查找是否存在webpack.sh或者webpack.cmd文件，如果存在，就执行，不存在，就抛出错误。 实际的入口文件是：node…","fields":{"slug":"/0008_webpack源码分析/"},"frontmatter":{"date":"2020-02-09","title":"webpack源码分析","description":"Webpack源码分析，从webpack的启动过程等分析源码。","tags":["webpack"]}}},{"node":{"excerpt":"闲来没事，摘抄一下土味情话和彩虹屁，万一用上了呢。😃 001 我发现昨天很喜欢你，今天也很喜欢你，而且有预感明天也会喜欢你。 002 我想你一定很忙，所以只看前三个字就好啦。 003 不要抱怨，抱我。 004 最近有谣言说我喜欢你，我要澄清一下，那不是谣言。 00…","fields":{"slug":"/土味情话和彩虹屁/"},"frontmatter":{"date":"2020-02-09","title":"土味情话和彩虹屁","description":"摘抄土味情话。","tags":["摘抄"]}}},{"node":{"excerpt":"使用webpack进行图片压缩 要求：基于Node库的imagemin或者tinypng API。\n使用：配置image-webpack-loader。 imagemin的优点： 有很多定制选项； 可以引入更多第三方优化插件，比如pngquant…","fields":{"slug":"/0007_webpack构建时资源体积大小的优化/"},"frontmatter":{"date":"2020-02-08","title":"webpack构建时资源体积大小的优化","description":"Webpack构建时，资源体积大小的优化，包括图片大小优化、CSS优化等等。","tags":["webpack"]}}},{"node":{"excerpt":"初级分析：使用webpack内置的stats stats：构建的统计信息。 在Node.js中使用： 速度分析：使用speed-measure-webpack-plugin 使用这个插件，分析整个打包总耗时； 可以看到每个loader…","fields":{"slug":"/0006_webpack构建分析与优化/"},"frontmatter":{"date":"2020-02-06","title":"webpack构建分析与优化","description":"Webpack构建优化，包括构建速度、bundle体积等的优化。","tags":["webpack"]}}},{"node":{"excerpt":"构建配置包设计 构建配置抽离成npm包的意义 通用性 业务开发者无需关注构建配置 统一团队构建脚本 可维护性 构建配置合理的拆分 README文档、ChangeLog…","fields":{"slug":"/0005_webpack实战：一个webpack构建包的方方面面/"},"frontmatter":{"date":"2020-02-05","title":"webpack实战：一个webpack构建包的方方面面","description":"Webpack实战，从头开始写一个webpack构建包，并发布到npm上。","tags":["webpack"]}}},{"node":{"excerpt":"webpack和Eslint结合 制定团队的eslint规范 不重复造轮子，基于eslint:recommend配置并改进 能够帮助发现代码错误的规则，全部开启 帮助保持团队的代码风格统一，而不是限制开发体验 eslint如何执行落地? 和CI/CD系统集成（增加lint…","fields":{"slug":"/0004_webpack进阶篇(2)/"},"frontmatter":{"date":"2020-02-04","title":"webpack进阶篇(2)","description":"Webpack的进阶用法，列举常见使用场景。","tags":["webpack"]}}},{"node":{"excerpt":"treeshaking的使用和原理分析 tree shaking：摇树优化，借鉴于rollup。 treeshaking概念与使用 概念：一个模块可能有多个方法，只有其中某个方法使用到了，整个文件就会被打包到bundle中， tree shaking…","fields":{"slug":"/0003_webpack进阶篇(1)/"},"frontmatter":{"date":"2020-02-03","title":"webpack进阶篇(1)","description":"Webpack的进阶用法，列举常见使用场景。","tags":["webpack"]}}},{"node":{"excerpt":"文件指纹策略：chunkhash、contenthash和hash 什么是文件指纹？ 打包后输出的文件名的后缀 。 文件指纹如何生成？ hash：和整个项目的构建相关，只有项目文件有修改，整个项目构建的hash值就会更改。(compilation) chunkhash…","fields":{"slug":"/0002_webpack基础篇(2)/"},"frontmatter":{"date":"2020-02-02","title":"webpack基础篇(2)","description":"Webpack的基础用法，列举常见使用场景。","tags":["webpack"]}}},{"node":{"excerpt":"为什么需要构建工具? 转换 ES6 语法 转换 JSX CSS 前缀补全/预处理器 压缩混淆 图片压缩 为什么选择webpack? 社区生态丰富 配置灵活和插件化扩展 官方更新迭代速度快 环境搭建 安装 node.js 和 npm 安装 webpack 和 webpack-cli…","fields":{"slug":"/0001_webpack基础篇(1)/"},"frontmatter":{"date":"2020-02-01","title":"webpack基础篇(1)","description":"Webpack的基础用法，包括其核心概念entry、output、loader、plugin、mode等。","tags":["webpack"]}}},{"node":{"excerpt":"本博客基于 React 框架  Gatsby  搭配  GraphQL  开发。 UNSW MIT在读，未来准备从事前端开发 搭建博客主要想要记录自己的学习历程 特别鸣谢unique.mo提供的gatsby主题☞ https://github.com/uniquemo…","fields":{"slug":"/about/"},"frontmatter":{"date":"2020-01-13","title":"My Blog's About Page","description":"My profile page~","tags":null}}}]}},"pageContext":{}},"staticQueryHashes":["440568431","63159454","946521183"]}
{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Steve's blog"}},"allMdx":{"edges":[{"node":{"excerpt":"背景 由于资源有限（只有一台服务器），又希望在服务器上部署多个静态站点，多个静态站点之间通过不同的 path 进行区分。如访问我的博客，希望通过  host/blog/xxx  来访问。于是有了今天的探索。 解决方案 经过一番搜索，找到了解决方案，原来 Gatsby…","fields":{"slug":"/0045_gatsby添加pathPrefix/"},"frontmatter":{"date":"2021-06-17","title":"Gatsby 添加 pathPrefix","description":"为了能在服务器上部署多个静态站点，给 Gatsby 添加 pathPrefix。","tags":["工程化"]}}},{"node":{"excerpt":"滑动窗口算法的大致逻辑 这个算法技巧的时间复杂度是O(N)，比字符串暴力算法要高效得多。 滑动窗口算法的代码框架 最小覆盖子串 leetcode:  最小覆盖子串 滑动窗口算法的思路是这样： 我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right =…","fields":{"slug":"/0044_算法思维之滑动窗口技巧/"},"frontmatter":{"date":"2020-06-15","title":"算法思维之滑动窗口技巧","description":"滑动窗口技巧介绍。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"双指针技巧分为两类，一类是「快慢指针」，一类是「左右指针」。 前者解决主要解决链表中的问题，比如典型的判定链表中是否包含环； 后者主要解决数组（或者字符串）中的问题，比如二分查找。 快慢指针的常见算法 快慢指针一般都初始化指向链表的头结点head，前进时快指针fast…","fields":{"slug":"/0043_算法思维之双指针技巧/"},"frontmatter":{"date":"2020-06-14","title":"算法思维之双指针技巧","description":"剖析双指针技巧，包括快慢指针与左右指针。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"二分查找框架 分析二分查找的一个技巧是：不要出现else，而是把所有情况用else if写清楚，这样可以清楚地展现所有细节。 理解后可自行简化。 其中 ... 标记的部分，就是可能出现细节问题的地方，当看到一个二分查找的代码时，首先注意这几个地方。 另外，计算mid…","fields":{"slug":"/0042_算法思维之二分查找/"},"frontmatter":{"date":"2020-06-13","title":"算法思维之二分查找","description":"深入理解二分查找思想。","tags":["算法与数据结构"]}}},{"node":{"excerpt":"…","fields":{"slug":"/0041_算法思维之递归/"},"frontmatter":{"date":"2020-06-12","title":"算法思维之递归","description":"深入理解递归思想。","tags":["算法与数据结构"]}}}]}},"pageContext":{}},"staticQueryHashes":["440568431","63159454","946521183"]}